name: Trigger CircleCI workflow

on:
  # Use pull_request_target, as we don't need to check out the actual code of the fork in this script.
  # And this is the only way to trigger the Circle CI API on forks as well.
  pull_request_target:
    types: [opened, synchronize, labeled, unlabeled, reopened, converted_to_draft, ready_for_review]
  push:
    branches:
      - next

jobs:
  get-branch:
    runs-on: ubuntu-latest
    steps:
      - id: get-branch
        env:
          # Stored as environment variable to prevent script injection
          REF_NAME: ${{ github.ref_name }}
          PR_REF_NAME: ${{ github.event.pull_request.head.ref }}
        run: |
          if  [ "${{ github.event.pull_request.head.repo.fork }}" = "true" ]; then
            export BRANCH=pull/${{ github.event.pull_request.number }}/head
            elif [ "${{ github.event_name }}" = "push" ]; then
            export BRANCH="$REF_NAME"
            else
            export BRANCH="$PR_REF_NAME"
          fi
          echo "$BRANCH"
          echo "branch=$BRANCH" >> $GITHUB_ENV
    outputs:
      branch: ${{ env.branch }}

  trigger-ci-tests:
    runs-on: ubuntu-latest
    needs: get-branch
    if: github.event_name == 'pull_request_target' && github.event.pull_request.draft == true && !contains(github.event.pull_request.labels.*.name, 'ci:pr') && !contains(github.event.pull_request.labels.*.name, 'ci:merged') && !contains(github.event.pull_request.labels.*.name, 'ci:daily')
    steps:
      - name: Trigger draft PR tests
        run: >
          curl -X POST --location "https://circleci.com/api/v2/project/gh/storybookjs/storybook/pipeline" \
            -H "Content-Type: application/json" \
            -H "Circle-Token: $CIRCLE_CI_TOKEN" \
            -d '{
                  "branch": "'"$BRANCH"'",
                  "parameters": {
                    "workflow": "ci"
                  }
                }'
        env:
          CIRCLE_CI_TOKEN: ${{ secrets.CIRCLE_CI_TOKEN }}
          BRANCH: ${{ needs.get-branch.outputs.branch }}
  trigger-pr-tests:
    runs-on: ubuntu-latest
    needs: get-branch
    if: github.event_name == 'pull_request_target' && ((github.event.pull_request.draft == false || contains(github.event.pull_request.labels.*.name, 'ci:pr')) && !contains(github.event.pull_request.labels.*.name, 'ci:merged') && !contains(github.event.pull_request.labels.*.name, 'ci:daily'))
    steps:
      - name: Trigger PR tests
        run: >
          curl -X POST --location "https://circleci.com/api/v2/project/gh/storybookjs/storybook/pipeline" \
            -H "Content-Type: application/json" \
            -H "Circle-Token: $CIRCLE_CI_TOKEN" \
            -d '{
                  "branch": "'"$BRANCH"'",
                  "parameters": {
                    "workflow": "pr"
                  }
                }'
        env:
          CIRCLE_CI_TOKEN: ${{ secrets.CIRCLE_CI_TOKEN }}
          BRANCH: ${{ needs.get-branch.outputs.branch }}
  trigger-merged-tests:
    runs-on: ubuntu-latest
    needs: get-branch
    if: github.event_name == 'push' || (contains(github.event.pull_request.labels.*.name, 'ci:merged') && !contains(github.event.pull_request.labels.*.name, 'ci:daily'))
    steps:
      - name: Trigger merged tests
        run: >
          curl -X POST --location "https://circleci.com/api/v2/project/gh/storybookjs/storybook/pipeline" \
            -H "Content-Type: application/json" \
            -H "Circle-Token: $CIRCLE_CI_TOKEN" \
            -d '{
                  "branch": "'"$BRANCH"'",
                  "parameters": {
                    "workflow": "merged"
                  }
                }'
        env:
          CIRCLE_CI_TOKEN: ${{ secrets.CIRCLE_CI_TOKEN }}
          BRANCH: ${{ needs.get-branch.outputs.branch }}
  trigger-daily-tests:
    runs-on: ubuntu-latest
    needs: get-branch
    if: github.event_name == 'pull_request_target' && contains(github.event.pull_request.labels.*.name, 'ci:daily')
    steps:
      - name: Trigger the daily tests
        run: >
          curl -X POST --location "https://circleci.com/api/v2/project/gh/storybookjs/storybook/pipeline" \
            -H "Content-Type: application/json" \
            -H "Circle-Token: $CIRCLE_CI_TOKEN" \
            -d '{
                  "branch": "'"$BRANCH"'",
                  "parameters": {
                    "workflow": "daily"
                  }
                }'
        env:
          CIRCLE_CI_TOKEN: ${{ secrets.CIRCLE_CI_TOKEN }}
          BRANCH: ${{ needs.get-branch.outputs.branch }}